version: "3.8"
services:
  backend:
    build: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app/backend
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    environment:
      - DJANGO_SETTINGS_MODULE=librecritic.settings.dev
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      # One-way volume to use node_modules from inside image
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    command: npm start
  db:
    image: postgres:11.1-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


# version: '3.7'
# services:
#   web:
#     build: ./backend
#     command: python manage.py runserver 0.0.0.0:8000
#     volumes:
#       - ./backend:/usr/src/app/backend
#     ports:
#       - 8000:8000
#     env_file:
#       - ./.env.dev
#     depends_on:
#       - db
#   frontend:
#     build: ./frontend
#     command: ["npm", "start"]
#     volumes:
#       - ./frontend:/usr/src/app/frontend
#       - /usr/src/app/node_modules
#     ports:
#       - 3000:3000
#   db:
#     image: postgres:12.0-alpine
#     volumes:
#       - postgres_data:/var/lib/postgresql/data/
#     environment:
#       - POSTGRES_USER=hello_django
#       - POSTGRES_PASSWORD=hello_django
#       - POSTGRES_DB=hello_django_dev

# volumes:
#   postgres_data: